{"version":3,"sources":["../../src/controller/shamirController.js"],"names":["callback","module","exports","getQuestions","cb","successCallback","questions","splitQnA","secret","q","a","type","count","data","errorCallback","publicShare","publicshare","combineQnA","split","input_key","numberofShare","numberofcombine","splits","prime512","splitEncoded","input_string","prime3217","encoded","string","decoded","combine","share","combines","toHex","combineEncoded"],"mappings":"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","file":"shamirController.js","sourcesContent":["import * as callback from '../helper/callback';\nimport {  split , combine, split_qna, combine_qna, questions , prime512 , prime3217, encode , decode } from 'secretkeysharing';\n\n\nmodule.exports = {\n    /*\n    * return array of questions available in the library\n    */\n    async getQuestions (cb) {\n        await callback.successCallback(questions , cb)\n    },\n\n    async splitQnA(secret, q, a, type, cb) {\n        /* \n        as per libary number of share should be atleast 3\n        */\n       if(q.count < 3 && a.count < 3  ){\n        let data = {'error' : 'Minimum Number of question and answer should be 3'}\n        await callback.errorCallback(data , cb)\n        } else {\n            const publicShare = split_qna(secret, 3, q, a, type);\n            await callback.successCallback({ publicshare: publicShare }, cb);\n        }\n    },\n\n    async combineQnA(publicshare, q, a, type, cb) {\n       if(q.count < 3 && a.count < 3 ){\n        let data = {'error' : 'Minimum Number of question and answer should be 3'}\n        await callback.errorCallback(data , cb)\n        } else {\n            const secret = combine_qna(publicshare, q, a, type);\n            await callback.successCallback({ secret: secret }, cb);\n        }\n    },\n\n    async split (input_key , numberofShare , numberofcombine, cb) {\n        /* \n        as per libary number of share should be atleast 3\n        */\n        if(numberofShare < 3 ){\n            let data = {'error' : 'Minimum Number of share should be 3'}\n            await callback.errorCallback(data , cb)\n        }else \n\n        /* \n        as per libary number of share should be atleast 3\n        */\n        if (numberofcombine<3){\n            let data = {'error' : 'Minimum Number of combination should be 3'}\n            await callback.errorCallback(data , cb)\n        }else {\n             const splits = split(input_key, numberofShare, numberofcombine , prime512 );\n             await callback.successCallback(splits, cb);\n        }\n    },\n\n   \n    async splitEncoded (input_string , numberofShare , numberofcombine, cb) {\n        /* \n        as per libary number of share should be atleast 3\n        */\n        if(numberofShare < 3 ){\n            let data = {'error' : 'Minimum Number of share should be 3'}\n            await callback.errorCallback(data , cb)\n        }else \n\n        /* \n        as per libary number of share should be atleast 3\n        */\n        if (numberofcombine<3){\n            let data = {'error' : 'Minimum Number of combination should be 3'}\n            await callback.errorCallback(data , cb)\n        }else {\n             const splits = split(encode(input_string), numberofShare, numberofcombine , prime3217 );\n             await callback.successCallback(splits, cb);\n        }\n    },\n\n    async encoded(string, cb) {\n        await callback.successCallback(encode(string), cb);\n    },\n\n    async decoded(string, cb) {\n        await callback.successCallback(decode(string), cb);\n    },\n\n\n   async combine (share, cb) {\n       /*\n       share structure should be \n       [\n        {\n            \"x\": \"1\",\n            \"y\": \"0x8b2954d1947407717a4bb4557cb59f71000c4f0355b0b838f06ad97ddf8ae9449c1ccfc5400f0296a9e62da1c43b1bb34e06331c8aecd7dea2b9df0a865857ec\"\n        },\n        {\n            \"x\": \"2\",\n            \"y\": \"0x4055f89d5123a389f9d7fc7e2c7e245b12cc425bed6c908debcb8416ff0965f89c87923601be5e29396708276c6be64beaf375521a6f8011b72ac9b0996c5d3b\"\n        },\n        {\n            \"x\": \"3\",\n            \"y\": \"0x1f85eb63360ed4497ea4d87a0f598ebe383fda09c73388fef221ffcb5e7b761c01404752450e12b7ae828f91bb6a2f5f3b24f9a10ffdb022c6561c6ec99de3e5\"\n        }\n    ]\n    */\n\n      const combines = combine(share , prime512).toHex();\n      await callback.successCallback(combines,cb);\n    },\n\n    async combineEncoded (share, cb) {\n        /*\n        share structure should be \n        [\n         {\n             \"x\": \"1\",\n             \"y\": \"0x8b2954d1947407717a4bb4557cb59f71000c4f0355b0b838f06ad97ddf8ae9449c1ccfc5400f0296a9e62da1c43b1bb34e06331c8aecd7dea2b9df0a865857ec\"\n         },\n         {\n             \"x\": \"2\",\n             \"y\": \"0x4055f89d5123a389f9d7fc7e2c7e245b12cc425bed6c908debcb8416ff0965f89c87923601be5e29396708276c6be64beaf375521a6f8011b72ac9b0996c5d3b\"\n         },\n         {\n             \"x\": \"3\",\n             \"y\": \"0x1f85eb63360ed4497ea4d87a0f598ebe383fda09c73388fef221ffcb5e7b761c01404752450e12b7ae828f91bb6a2f5f3b24f9a10ffdb022c6561c6ec99de3e5\"\n         }\n     ]\n     */\n \n       const combines = combine(share , prime3217).toHex();\n       await callback.successCallback(decode(combines),cb);\n     }\n}"]}