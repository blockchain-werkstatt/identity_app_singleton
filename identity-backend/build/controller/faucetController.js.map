{"version":3,"sources":["../../src/controller/faucetController.js"],"names":["CONFIG","debug","logger","undefined","lookupContractAddress","gethHost","config","endpoint","TEST_PIN","TEST_SEED_PHRASE","TEST_ETHER_AMOUNT","wallet","Wallet","mainAddress","init","seedPhrase","pin","then","_mainAddress","getBalance","request","get","port","on","response","console","log","JSON","stringify","catch","requestEther","address","callback","txHash","statusCode","sendEther","receiver","amountEther","data","result","getBalances","balance","success"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAGA,MAAMA,SAAS;AACbC,WAAO,IADM;AAEbC,YAAQC,SAFK;AAGbC,2BAAuB,IAHV;AAIbC,cAAUC,iBAAOC;;AAInB;AARe,CAAf,CASA,MAAMC,WAAW,MAAjB;AACA,MAAMC,mBAAmB,2EAAzB;AACA,MAAMC,oBAAoB,GAA1B;;AAEO,MAAMC,0BAAS,IAAIC,gBAAJ,CAAWZ,MAAX,CAAf;;AAEP,IAAIa,WAAJ;;AAEAF,OACGG,IADH,CACQ,EAACC,YAAYN,gBAAb,EAA+BO,KAAKR,QAApC,EADR,EAEGS,IAFH,CAEQC,gBAAgB;AACpBP,WAAOQ,UAAP,CAAkBD,YAAlB,EAAgCD,IAAhC,CAAqC,MAAM;AACzC;AACEG,0BAAQC,GAAR,CAAY,sBAAqBf,iBAAOgB,IAA5B,GAAkC,gBAAlC,GAAmDJ,YAA/D,EAA6EK,EAA7E,CAAgF,UAAhF,EAA4FC,QAAD,IAAY;AACpG;AACAC,oBAAQC,GAAR,CAAY,kBAAgBC,KAAKC,SAAL,CAAeJ,QAAf,CAA5B;AACAX,0BAAcK,YAAd;AACF,SAJD;AAKH,KAPD;AAQD,CAXH,EAYGW,KAZH,CAYS,MAAM,CAEZ,CAdH;;AAgBC,MAAMC,eAAe,CAACC,OAAD,EAASC,QAAT,KAAoB;;AAElC,QAAIC,MAAJ;;AAEAb,sBAAQC,GAAR,CAAY,sBAAqBf,iBAAOgB,IAA5B,GAAkC,gBAAlC,GAAmDT,WAA/D,EAA4EU,EAA5E,CAA+E,UAA/E,EAA2FC,QAAD,IAAY;;AAElG,YAAGA,SAASU,UAAT,IAAuB,GAA1B,EAA8B;AAC9BvB,mBAAOwB,SAAP,CAAiB,EAACC,UAASL,OAAV,EAAmBM,aAAY3B,iBAA/B,EAAkD4B,MAAK,IAAvD,EAA6DtB,KAAIR,QAAjE,EAAjB,EAA6FS,IAA7F,CAAmGsB,MAAD,IAAU;AACxGN,yBAASM,MAAT;AACA,uBAAO5B,OAAO6B,WAAP,CAAmBT,OAAnB,CAAP;AACC,aAHL,EAGOd,IAHP,CAGawB,OAAD,IAAY;AACpB;AACAhB,wBAAQC,GAAR,CAAY,aAAYe,OAAxB;AACAT,yBAAS,EAACU,SAAQ,kBAAT,EAA4BT,QAAOA,MAAnC,EAAT;AACC,aAPL;AAQC,SATD,MASK;AACDD,qBAAS,sDAAT;AACH;AAEJ,KAfD;AAgBH,CApBJ;;QAsBQF,Y,GAAAA,Y","file":"faucetController.js","sourcesContent":["import Wallet from 'identity-contracts/lib/wallet'\nimport config from '../config';\nimport request from 'request';\n\n\nconst CONFIG = {\n  debug: true,\n  logger: undefined,\n  lookupContractAddress: '0x',\n  gethHost: config.endpoint\n}\n\n\n//only for testing purpose\nconst TEST_PIN = \"1234\";\nconst TEST_SEED_PHRASE = \"mandate print cereal style toilet hole cave mom heavy fork network indoor\";\nconst TEST_ETHER_AMOUNT = 0.5;\n\nexport const wallet = new Wallet(CONFIG);\n\nlet mainAddress;\n\nwallet\n  .init({seedPhrase: TEST_SEED_PHRASE, pin: TEST_PIN})\n  .then(_mainAddress => {\n    wallet.getBalance(_mainAddress).then(() => {\n      //check the minimum required balance\n        request.get('http://localhost:'+ config.port+ '/fuel/request/'+_mainAddress).on('response',(response)=>{\n           // eslint-disable-next-line no-console\n           console.log('response is :'+JSON.stringify(response));\n           mainAddress = _mainAddress;\n        });\n    })\n  })\n  .catch(() => {\n\n  })\n\n const requestEther = (address,callback)=>{\n    \n        let txHash;\n\n        request.get('http://localhost:'+ config.port+ '/fuel/request/'+mainAddress).on('response',(response)=>{\n        \n            if(response.statusCode == 200){\n            wallet.sendEther({receiver:address, amountEther:TEST_ETHER_AMOUNT, data:null, pin:TEST_PIN}).then((result)=>{\n                txHash = result\n                return wallet.getBalances(address)\n                }).then((balance) =>{\n                // eslint-disable-next-line no-console\n                console.log(\"balance:\" +balance)\n                callback({success:\"transaction send\",txHash:txHash});\n                })\n            }else{\n                callback('not able to fuel right now , Keys are busy try again');\n            }\n        \n        });\n    }\n\n export {requestEther};"]}