{"version":3,"sources":["../../src/route/shamir.js"],"names":["controller","routes","get","req","res","getQuestions","result","json","post","inputsting","body","inputkey","numberofshares","share","numberofcombine","combine","Error","split","inputString","splitEncoded","secret","question","questions","answer","answers","type","splitQnA","shares","combineEncoded","publicshare","combineQnA","input","encoded","decoded"],"mappings":"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","file":"shamir.js","sourcesContent":["import { Router } from 'express';\nimport * as controller from '../controller/shamirController';\n\nconst routes = Router();\n\n\nroutes.get('/questions', (req, res) => {\n    controller.getQuestions((result) => {\n        res.json(result);\n    });\n});\n\n/*\nPOST /spit\n*/\n\nroutes.post('/split', (req, res) => {\n\nconst inputsting = req.body.inputkey;\nconst numberofshares = req.body.share;\nconst numberofcombine = req.body.combine;\n\nif(inputsting==null || inputsting == ''){\n    throw new Error('input key is invalid');\n}\n\nif(numberofshares==null || numberofshares == ''){\n    throw new Error('Number of shares is not defined');\n}\n\nif(numberofcombine==null || numberofcombine == ''){\n    throw new Error('Number of Combine is not defined');\n}\n\n controller.split(inputsting, numberofshares , numberofcombine ,(result)=>{\n    res.json(result);\n    });\n});\n\n/*\nPOST /spit\n*/\n\nroutes.post('/splitEncoded', (req, res) => {\n\n    const inputsting = req.body.inputString;\n    const numberofshares = req.body.share;\n    const numberofcombine = req.body.combine;\n    \n    if(inputsting==null || inputsting == ''){\n        throw new Error('input string is invalid');\n    }\n    \n    if(numberofshares==null || numberofshares == ''){\n        throw new Error('Number of shares is not defined');\n    }\n    \n    if(numberofcombine==null || numberofcombine == ''){\n        throw new Error('Number of Combine is not defined');\n    }\n    \n     controller.splitEncoded(inputsting, numberofshares , numberofcombine ,(result)=>{\n        res.json(result);\n        });\n    });\n\n\n/*\nPOST /spitqna\n*/\n\nroutes.post('/splitQnA', (req, res) => {\n\n    const inputsting = req.body.secret;\n    const question = req.body.questions;\n    const answer = req.body.answers;\n    const type = req.body.type;\n    \n    if(inputsting==null || inputsting == ''){\n        throw new Error('input string is invalid');\n    }\n\n    if(type==null || type == ''){\n        throw new Error('type is invalid either hex (prime512) or null for enocode menemonic (prime3217)');\n    }\n    \n    if(question==null || question == ''){\n        throw new Error('questions of Combine is not defined');\n    }\n\n    if(answer==null || answer == ''){\n        throw new Error('answers of Combine is not defined');\n    }\n    \n     controller.splitQnA(inputsting , question, answer , type, (result)=>{\n        res.json(result);\n        });\n    });\n\n\n// /*\n// POST combine\n// */\nroutes.post( '/combine' , (req,res)=>{\n    let shares = req.body.shares;\n        controller.combine(shares ,(result) =>{\n            res.json(result);\n        });\n});\n\n\n// /*\n// POST combine\n// */\nroutes.post( '/combineEncoded' , (req,res)=>{\n    let shares = req.body.shares;\n        controller.combineEncoded(shares ,(result) =>{\n            res.json(result);\n        });\n});\n\n/*\nPOST /combineqna\n*/\n\nroutes.post('/combineQnA', (req, res) => {\n\n    const inputsting = req.body.publicshare;\n    const question = req.body.questions;\n    const answer = req.body.answers;\n    const type = req.body.type;\n    \n    if(inputsting==null || inputsting == ''){\n        throw new Error('input string is invalid');\n    }\n    \n    if(type==null || type == ''){\n        throw new Error('type is invalid either hex (prime512) or null for enocode menemonic (prime3217)');\n    }\n    \n    if(question==null || question == ''){\n        throw new Error('questions of Combine is not defined');\n    }\n\n    if(answer==null || answer == ''){\n        throw new Error('answers of Combine is not defined');\n    }\n    \n     controller.combineQnA(inputsting , question, answer , type, (result)=>{\n        res.json(result);\n        });\n    });\n\n\n    routes.post('/encode', (req, res) =>  {\n        const input = req.body.input;\n        if(input==null || input == ''){\n            throw new Error('input is invalid');\n        }\n        controller.encoded(input, (result) => {\n            res.json(result);\n        })\n    });\n\n    routes.post('/decode', (req, res) =>  {\n        const input = req.body.input;\n        if(input==null || input == ''){\n            throw new Error('input is invalid');\n        }\n        controller.decoded(input, (result) => {\n            res.json(result);\n        })\n    });\n\n/*\nroute to be used to share the key to other either using Email or other way\n*/\n\nroutes.post('share', (req, res)=>{\n    res.json(\"implementation pending\");\n})\n\n/*\nasking the user to return the key save either on email or other\n*/\nroutes.post('askkey', (req, res)=>{\n    res.json(\"implementation pending\");\n})\n\nexport default routes;"]}